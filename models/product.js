const mongoose = require('mongoose')

const Schema = mongoose.Schema;

const productSchema = new Schema({
  title : {
    type: String,
    required: true
  },
  imageUrl : {
    type: String,
    required: true
  },
  description : {
    type: String,
    required: true
  },
  price : {
    type: Number,
    required: true
  },
  userId: {
    type: Schema.Types.ObjectId,
    ref: 'User',
    required: true
  }
})

module.exports = mongoose.model('Product', productSchema)

// const fs = require("fs");
// const path = require("path");
/* MySQL manual implementation
const db = require("../util/database");
const Cart = require("../models/cart");
module.exports = class Product {
  constructor(id, title, imageUrl, description, price) {
    this.id = id;
    this.title = title;
    this.imageUrl = imageUrl;
    this.description = description;
    this.price = price;
  }

  save() {
    // the id is automatically generated by mysql
    return db.execute(
      "INSERT INTO products (title, imageUrl, description, price) VALUES (?, ?, ?, ?)",
      [this.title, this.imageUrl, this.description, this.price]
    );
  }

  static fetchAll() {
    return db.execute("SELECT * FROM products");
  }

  static findById(id) {
    return db.execute("SELECT * FROM products WHERE products.id = ?", [id]);
  }
}; */

/* Manually implement 
// pathToData = /data/products.json

const pathToData = path.join(
  path.dirname(require.main.filename),
  "data",
  "products.json"
);
// This function receive a callback
const getProductsFromFileAndParse = (callback) => {
  // Read the file following a path, if file doesn't exist, create a new one
  fs.readFile(pathToData, (err, fileContent) => {
    if (err) {
      callback([]);
    } else {
      callback(JSON.parse(fileContent));
    }
  });
};

module.exports = class Product {
  constructor(id, title, imageUrl, description, price) {
    this.id = id;
    this.title = title;
    this.imageUrl = imageUrl;
    this.description = description;
    this.price = price;
  }

  save() {
    // when we call function getProductsFromFileAndParse, we  parsed the data. Therefore, the callback in this function will be pushing data, stringifying it and writing it to file.
    getProductsFromFileAndParse((products) => {
      if (this.id) {
        // editing
        const existingProductIndex = products.findIndex(
          (prod) => prod.id == this.id
        );
        const updatedProducts = [...products];
        updatedProducts[existingProductIndex] = this;
        fs.writeFile(pathToData, JSON.stringify(updatedProducts), (err) => {
          console.log(err);
        });
      } else {
        // create new product
        this.id = Math.random().toString();
        products.push(this);

        fs.writeFile(pathToData, JSON.stringify(products), (err) => {
          console.log(err);
        });
      }
    });
  }

  static deleteById(id) {
    getProductsFromFileAndParse((products) => {
      const product = products.find((p) => p.id === id);
      const updatedProducts = products.filter((prod) => prod.id !== id);
      fs.writeFile(pathToData, JSON.stringify(updatedProducts), (err) => {
        if (!err) {
          Cart.deleteProduct(id, product.price);
        }
      });
    });
  }

  static fetchAll(callback) {
    getProductsFromFileAndParse(callback);
  }

  static findById(id, callback) {
    getProductsFromFileAndParse((products) => {
      const product = products.find((prod) => prod.id === id);
      callback(product);
    });
  }
};
*/

/* // Using Sequelize
const Sequelize = require('sequelize')

const sequelize = require('../util/database')

const Product = sequelize.define('product', {
  id : {
    type: Sequelize.INTEGER,
    autoIncrement: true,
    allowNull: false,
    primaryKey: true
  },
  title: Sequelize.STRING,
  price: {
    type: Sequelize.DOUBLE,
    allowNull: false,
  },
  imageUrl: {
    type: Sequelize.STRING,
    allowNull: false,
  },
  description : {
    type: Sequelize.STRING,
    allowNull: false,
  }
});

module.exports = Product */

/* Mongodb manually implements 
const mongodb = require("mongodb");
const getDb = require("../util/database").getDb;

class Product {
  constructor(title, imageUrl, description, price, id, userId) {
    this.title = title;
    this.imageUrl = imageUrl;
    this.price = price;
    this.description = description;
    this._id = id ? new mongodb.ObjectId(id) : null;
    this.userId = userId
  }

  save() {
    const db = getDb();
    let dbOp;
    if (this._id) {
      console.log(this._id);
      dbOp = db
        .collection("products")
        .updateOne({ _id: this._id }, { $set: this });
    } else {
      dbOp = db.collection("products").insertOne(this);
    }
    return dbOp
      .then((result) => {
        console.log(result);
      })
      .catch((err) => {
        console.log(err);
      });
  }

  static fetchAll() {
    const db = getDb();
    return db
      .collection("products")
      .find()
      .toArray()
      .then((products) => {
        return products;
      })
      .catch((err) => {
        console.log(err);
      });
  }

  static findById(prodId) {
    const db = getDb();
    return db
      .collection("products")
      .find({ _id: new mongodb.ObjectId(prodId) })
      .next()
      .then((product) => {
        return product;
      })
      .catch((err) => {
        console.log(err);
      });
  }

  static deleteById(prodId) {
    const db = getDb();
    return db
      .collection("products")
      .deleteOne({ _id: new mongodb.ObjectId(prodId) })
      .then(result => {
        console.log("Delete successfully !!!");
      })
      .catch((err) => console.log(err));
  }
}

module.exports = Product; */
